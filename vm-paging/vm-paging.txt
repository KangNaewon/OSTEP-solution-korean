1.  변환을 하기 전에 매개변수가 주어졌을 때 선형 페이지 테이블이 크기를 변경하는 방법을 연구하기 위해 시뮬레이터를 사용해 보자. 
    매개변수가 바뀜에 따라 선형 페이지 테이블의 크기를 계산하시오. 추천하는 입력은 아래와 같다. 
    -v 플래그를 사용하여 얼마나 많은 페이지 테이블 항목이 채워지는지 알 수 있다.
    
    먼저, 주소 공간이 커짐에 따라 선형 페이지 테이블 크기의 변화를 이해하기 위하여:
    paging−linear−translate.py −P 1K −a 1m −p 512m −v −n 0 
    paging−linear−translate.py −P 1K −a 2m −p 512m −v −n 0 
    paging−linear−translate.py −P 1K −a 4m −p 512m −v −n 0

    그런 다음 페이지 크기가 커짐에 따라 선형 페이지 테이블 크기의 변화를 이해하기 위하여 :
    paging−linear−translate.py −P 1k −a 1m −p 512m −v −n 0 
    paging−linear−translate.py −P 2k −a 1m −p 512m −v −n 0 
    paging−linear−translate.py −P 4k −a 1m −p 512m −v −n 0

    어느 것 하나라도 실행하기 전에 예상 경향에 대해 생각해 보라. 주소 공간이 커지면 페이지 테이블 크기는 어떻게 변하는가? 
    페이지 크기가 커지는 경우는? 일반적으로 큰 페이지 크기를 사용하면 안 되는 이유는 무엇인가?

A.  (페이지 테이블 크기) = (주소 공간 크기) / (페이지 크기)
    페이지의 크기가 일정할 때 주소 공간이 커지면 페이지 테이블 크기는 증가한다. 주소 공간을 나누는 고정 크기 단위가 페이지이다.
    따라서 주소 공간이 커지면 각 페이지를 물리 페이지 주소로 변환하는 페이지 테이블의 엔트리 숫자는 증가할 수 밖에 없으므로 
    페이지 테이블의 크기가 증가하는 것이다. 반대로 주소 공간의 크기가 일정할 때 페이지의 크기가 증가하면 페이지 테이블의 크기는
    감소한다.
    일반적으로 큰 페이지 크기를 사용하면 내부 단편화가 심해질 수 있으므로 사용하면 안 되는 것이다.

2.  자 이제 변환을 해 보자. 몇 가지 작은 예부터 시작해서 -u 플래그를 사용하여 주소 공간에 할당된 페이지 개수를 변경해 보라. 
    
    예를 들면:
    paging−linear−translate.py −P 1k −a 16k −p 32K −v −u 0 
    paging−linear−translate.py −P 1k −a 16k −p 32K −v −u 25 
    paging−linear−translate.py −P 1k −a 16k −p 32K −v −u 50 
    paging−linear−translate.py −P 1k −a 16k −p 32K −v −u 75 
    paging−linear−translate.py −P 1k −a 16k −p 32K −v −u 100

    각 주소 공간에 할당된 페이지의 비율을 높인다면 어떤 일이 벌어지는가?    

A.  페이지 테이블의 엔트리 중에서 valid bit가 1인 엔트리가 -u 플래그에 명시된 비율만큼 존재하게 된다.

3.  그러면 몇 가지 무작위 배정을 시도하자. 몇 가지 다른 (그리고 때로는 정말 어이 없는) 주소 공간 매개변수를 사용해 보라:
    paging−linear−translate.py −P 8 −a 32 −p 1024 −v −s 1 
    paging−linear−translate.py −P 8K −a 32k −p 1m −v −s 2 
    paging−linear−translate.py −P 1m −a 256m −p 512m −v −s 3
    
    이 조합 중 어느 조합이 비현실적인가? 이유는?
    
A.  첫 번째 조합은 페이지 크기, 주소 공간, 물리 메모리 모두 비현실적으로 작다.
    두 번째도 상대적으로 크나 여전히 작다.
    세 번째는 페이지 크기가 비현실적으로 크다.

4.  다른 문제를 시험해 보기 위해 프로그램을 사용하라. 프로그램이 더 이상 작동하지 않는 제약을 찾을 수 있는가? 
    예를 들어, 만약 주소 공간의 크기가 물리 메모리보다 크다면 어떤 일이 벌어지는가?

A.  일단 프로그램은 오류가 발생한다. 이외에도 주소 공간의 크기가 페이지 크기의 배수가 아니면 오류가 발생한다.
    만약 주소공간의 크기가 물리 메모리보다 크다면 페이지 교체와같은 다른 기법이 적용되어야 한다.

