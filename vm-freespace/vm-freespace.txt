1.  먼저 무작위 할당과 해제를 생성하기 위하여 -n 10 -H 0 -p BEST -s 0 플래그를 주고 실행시켜라. 
    alloc()과 free()가 무엇을 반환할지 예측할 수 있는가? 각 요청 후의 빈 공간 리스트의 상태를 추측할 수 있는가?
    시간이 지남에 따라 빈 공간 리스트에 대해 무엇을 알 수 있는가?

A.  병합을 하지 않기 때문에 alloc()과 free()를 반복할 수록 빈 공간 리스트의 길이는 증가하고 단편화되어간다.

2.  빈 공간 리스트를 탐색하기 위하여 최악 적합 정책을 사용할 때 결과는 어떻게 달라지는가(-p WORST)?
    무엇이 바뀌는가?

A.  더욱 빠르게 빈 공간 리스트의 길이가 증가한다.

3.  최초 적합을 사용한 경우는 어떤가(-p FIRST)? 최초 적합을 사용하면 속도 향상은 어떻게 되는가?

A.  최악 적합에 비해 앞쪽 주소에 빈 공간들이 몰려있다. 최초 적합을 사용하면 리스트를 순회할 필요가 없기 때문에 속도 향상이 일어난다.

4.  위 질문에 대해, 몇몇 정책의 경우 리스트의 정렬 순서가 빈 위치를 찾는 데 걸리는 시간에 영향을 준다. 
    다른 빈 공간 리스트의 순서(-l ADDRSORT, -l SIZESORT+, -l SIZESORT-)를 사용하여 정책과 리스트 순서가 서로 어떤 영향을 주는지 관찰 하라.

A.  BEST, WORST는 리스트를 순회하므로 정렬 순서가 걸리는 시간에 영향을 주지 않는다.
    FIRST는 SIZESORT- 플래그를 적용할 시 WORST와 동일한 효과를 낼 수 있고 SIZESORT+ 플래그를 적용할 시 BEST와 동일한 효과를 낼 수 있다.

5.  빈 공간의 합병은 매우 중요할 수 있다. 무작위 할당의 발수를 늘려라(-n 1000). 
    시간이 지날수록 요청의 발수가 많아지면 어떤 현상이 발생하는가? 병합이 있는 채로 그리고 없는 채로 실행하라(-C 플래그가 없거나 있거나). 
    출력에 어떤 차이를 볼 수 있는가? 각각의 경우의 시간이 지남에 따라 빈 공간 리스트의 크기는 얼마나 커지는가? 이 경우 리스트의 정렬 순서가 중요한가?

A.  병합이 있다면 빈 공간 리스트의 길이가 비교적 일정하고 병합이 없다면 시간이 지날수록 빈 공간 리스트의 길이가 매우 길어진다.

6.  할당 비율 -P를 50 이상으로 변경하면 어떤 일이 일어날까? 100에 가까울수록 할당에는 어떤 일이 생기는가? 0에 가까워진다면?

A.  100에 가까울 수록 힙 메모리가 부족해져 시간이 지날수록 메모리 할당이 불가능해진다.
    0에 가까울 수록 병합이 있을 때 빈 공간 리스트가 일정 크기 이상으로 커지지 않는다.

7.  심하게 단편화된 빈 공간을 만들어 내려면 어떤 종류의 요구를 생성할 수 있는가? 단편화된 리스트를 생성하기 위하여 -A 플래그를 사용하라. 
    다른 정책과 옵션이 빈 공간 리스트의 구조에 어떤 영향을 주는지 관찰하라.

A.  
