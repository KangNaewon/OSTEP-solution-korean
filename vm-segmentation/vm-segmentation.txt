1.  우선 몇 주소를 변환하기 위해 작은 주소 공간을 사용하여 보자. 
    여기에 여러 가지 랜덤 시드와 함께 간단한 매개변수의 집합이 있다. 이때 주소를 변환할 수 있을까?

A.  segmentation.py −a 128 −p 512 −b 0 −l 20 −B 512 −L 20 −s 0:
    Segment register information:

    Segment 0 base  (grows positive) : 0x00000000 (decimal 0)
    Segment 0 limit                  : 20

    Segment 1 base  (grows negative) : 0x00000200 (decimal 512)
    Segment 1 limit                  : 20

    Virtual Address Trace
    VA  0: 0x0000006c (decimal:  108) --> VALID in SEG1: 0x000001ec (decimal: 492)
    VA  1: 0x00000061 (decimal:   97) --> SEGMENTATION VIOLATION (SEG1)
    VA  2: 0x00000035 (decimal:   53) --> SEGMENTATION VIOLATION (SEG0)
    VA  3: 0x00000021 (decimal:   33) --> SEGMENTATION VIOLATION (SEG0)
    VA  4: 0x00000041 (decimal:   65) --> SEGMENTATION VIOLATION (SEG1)

    segmentation.py −a 128 −p 512 −b 0 −l 20 −B 512 −L 20 −s 1:
    Segment register information:

    Segment 0 base  (grows positive) : 0x00000000 (decimal 0)
    Segment 0 limit                  : 20

    Segment 1 base  (grows negative) : 0x00000200 (decimal 512)
    Segment 1 limit                  : 20

    Virtual Address Trace
    VA  0: 0x00000011 (decimal:   17) --> VALID in SEG0: 0x00000011 (decmial: 17)
    VA  1: 0x0000006c (decimal:  108) --> VALID in SEG1: 0x000001ec (decmial: 492)
    VA  2: 0x00000061 (decimal:   97) --> SEGMENTATION VIOLATION (SEG1)
    VA  3: 0x00000020 (decimal:   32) --> SEGMENTATION VIOLATION (SEG0)
    VA  4: 0x0000003f (decimal:   63) --> SEGMENTATION VIOLATION (SEG0)

    segmentation.py −a 128 −p 512 −b 0 −l 20 −B 512 −L 20 −s 2:
    Segment register information:

    Segment 0 base  (grows positive) : 0x00000000 (decimal 0)
    Segment 0 limit                  : 20

    Segment 1 base  (grows negative) : 0x00000200 (decimal 512)
    Segment 1 limit                  : 20

    Virtual Address Trace
    VA  0: 0x0000007a (decimal:  122) --> VALID in SEG1: 0x000001fa (decimal 506)
    VA  1: 0x00000079 (decimal:  121) --> VALID in SEG1: 0x000001f9 (decimal 505)
    VA  2: 0x00000007 (decimal:    7) --> VALID in SEG0: 0x00000007 (decimal 7)
    VA  3: 0x0000000a (decimal:   10) --> VALID in SEG0: 0x0000000a (decimal 10)
    VA  4: 0x0000006a (decimal:  106) --> SEGMENTATION VIOLATION (SEG1)  

2.  이제 우리가 구축한 이 작은 주소 공간을 이해하고 있는지 알아보자(위의 질문에서 사용한 매개변수를 사용하여). 
    세그멘트 0의 합법적인 가상 주소의 최댓값은 무엇인가? 세그멘트 1의 합법적인 가상 주소의 최저값은 무엇인가?
    이 전체 주소 공간의 잘못된 주소 중 가장 큰 주소와 가장 작은 주소는 무엇인가? 
    마지막으로,플래그 -A와 함께 실행한 segmentation.py의 정확성을 어떻게 확인할 수 있을까?

A.  세그먼트 0의 합법적인 가상 주소의 최댓값은 19이다. 세그먼트 1의 합법적인 가상 주소의 최저값은 108이다.
    전체 주소 공간의 잘못된 주소 중 가장 큰 주소는 491이고 가장 작은 주소는 20이다.
    python3 segmentation.py -a 128 -p 512 -b 0 -l 20 -B512 -L 20 -s 2 -A 0,19,20,107,108,127 -c
    위와 같이 실행한 결과:
        ARG seed 2
        ARG address space size 128
        ARG phys mem size 512

        Segment register information:

        Segment 0 base  (grows positive) : 0x00000000 (decimal 0)
        Segment 0 limit                  : 20

        Segment 1 base  (grows negative) : 0x00000200 (decimal 512)
        Segment 1 limit                  : 20

        Virtual Address Trace
        VA  0: 0x00000000 (decimal:    0) --> VALID in SEG0: 0x00000000 (decimal:    0)
        VA  1: 0x00000013 (decimal:   19) --> VALID in SEG0: 0x00000013 (decimal:   19)
        VA  2: 0x00000014 (decimal:   20) --> SEGMENTATION VIOLATION (SEG0)
        VA  3: 0x0000006b (decimal:  107) --> SEGMENTATION VIOLATION (SEG1)
        VA  4: 0x0000006c (decimal:  108) --> VALID in SEG1: 0x000001ec (decimal:  492)
        VA  5: 0x0000007f (decimal:  127) --> VALID in SEG1: 0x000001ff (decimal:  511)

3.  16바이트 주소 공간과 128바이트의 물리 메모리가 있다고 하자. 
    시뮬레이터가 지정된 주소 스트림에 대해 다음과 같은 변환 결과를 생성하기 위해서는
    베이스와 바운드를 어떤 값으로 설정해야 하는가: 유효, 유효, 위반, ..., 위반, 유효, 유효? 
    다음과 같은 매개변수를 가정한다.
    
    segmentation.py −a 16 −p 128
        −A 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 
        −−b0 ? −−l0 ? −−b1 ? −−l1 ?

A.  python3 segmentation.py -a 16 -p 128 -A 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 --b0 0 --l0 2 --b1 128 --l1 2 -c
    ARG seed 0
    ARG address space size 16
    ARG phys mem size 128

    Segment register information:

    Segment 0 base  (grows positive) : 0x00000000 (decimal 0)
    Segment 0 limit                  : 2

    Segment 1 base  (grows negative) : 0x00000080 (decimal 128)
    Segment 1 limit                  : 2

    Virtual Address Trace
    VA  0: 0x00000000 (decimal:    0) --> VALID in SEG0: 0x00000000 (decimal:    0)
    VA  1: 0x00000001 (decimal:    1) --> VALID in SEG0: 0x00000001 (decimal:    1)
    VA  2: 0x00000002 (decimal:    2) --> SEGMENTATION VIOLATION (SEG0)
    VA  3: 0x00000003 (decimal:    3) --> SEGMENTATION VIOLATION (SEG0)
    VA  4: 0x00000004 (decimal:    4) --> SEGMENTATION VIOLATION (SEG0)
    VA  5: 0x00000005 (decimal:    5) --> SEGMENTATION VIOLATION (SEG0)
    VA  6: 0x00000006 (decimal:    6) --> SEGMENTATION VIOLATION (SEG0)
    VA  7: 0x00000007 (decimal:    7) --> SEGMENTATION VIOLATION (SEG0)
    VA  8: 0x00000008 (decimal:    8) --> SEGMENTATION VIOLATION (SEG1)
    VA  9: 0x00000009 (decimal:    9) --> SEGMENTATION VIOLATION (SEG1)
    VA 10: 0x0000000a (decimal:   10) --> SEGMENTATION VIOLATION (SEG1)
    VA 11: 0x0000000b (decimal:   11) --> SEGMENTATION VIOLATION (SEG1)
    VA 12: 0x0000000c (decimal:   12) --> SEGMENTATION VIOLATION (SEG1)
    VA 13: 0x0000000d (decimal:   13) --> SEGMENTATION VIOLATION (SEG1)
    VA 14: 0x0000000e (decimal:   14) --> VALID in SEG1: 0x0000007e (decimal:  126)
    VA 15: 0x0000000f (decimal:   15) --> VALID in SEG1: 0x0000007f (decimal:  127)

4.  무작위로 생성된 가상 주소 중 약 90%가 유효한 시스템에서(즉, 세그멘테이션 위반이 아닌) 문제를 만들고 싶다고 가정하자. 
    그런 결과를 내려면 시뮬레이터를 어떻게 설정해야 하는가? 어떤 매개변수가 중요한가?

A.  합법적인 가상 주소의 비율이 90%가 되어야하므로 ((-l의 값과 -b의 값의 차이) + (-L의 값과 -B의 값의 차이))가 -a의 값의 90%가 되도록 설정한다.

5.  모든 가상 주소가 유효하지 않도록 시뮬레이터를 실행할 수 있는가? 어떻게?

A.  -l 0 -L 0 으로 매개변수를 설정한다.