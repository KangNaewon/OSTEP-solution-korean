1.  TLB 미스에 대해서 하드웨어가 검색을 한다는 가정 하에서 선형 페이지 테이블을 사용하면 페이지 테이블의 위치를 찾기 위해 하나의 레지스터가 필요하다.
    2단계 페이지 테이블을 사용하는 경우에는 몇 개의 레지스터가 필요한가? 3단계 페이지 테이블을 사용하는 경우는 몇 개가 필요한가?

A.  모두 하나의 레지스터만 필요하다. 그 이유는 첫 번째 페이지 디렉터리의 시작 주소만 알고있다면 가상주소값(VPN, offset)의 VPN에서 다음 단계의 페이지 디렉터리 인덱스값을
    추출할 수 있고 이 과정은 단계의 수와 관계없이 동일하다. 또한 마지막 페이지 디렉터리에서 얻은 찾고있는 페이지 테이블의 시작주소를 얻은 다음 offset을 통해 페이지 테이블에
    접근할 수 있다. 따라서 레지스터는 하나만 필요하다.

2.  시뮬레이터를 이용하여 변환을 수행하여 보자. 이때 랜덤 시드는 0과 1 그리고 2를 사용하여 보자.
    -c 플래그를 사용하여 답이 맞는지 확인해 보자. 각 검색을 수행하기 위해서 몇 번의 메모리 참조가 필요한가?

A.  0x611c: 0(valid)11000(24:PDIndex)01000(8:PTIndex)11100(28:offset)
    PBDR: 108 이므로 page 108의 24 인덱스 바이트를 접근한다.(첫번째 메모리 접근)
    page 108: 83(0th)fe e0 da 7f d4 7f eb be 9e d5 ad e4 ac 90 d6 92 d8 c1 f8 9f e1 ed e9 a1(24th) e8 c7 c2 a9 d1 db ff
    페이지 테이블의 시작주소는 0xa1이다. 0xa1 -> 1(valid)0100001(33)
    따라서 page 33의 8 인덱스 바이트를 접근한다. (두번째 메모리 접근)
    page 33: 7f(0th) 7f 7f 7f 7f 7f 7f 7f b5(8th) 7f 9d 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f f6 b1 7f 7f 7f 7f
    PFN: 0xb5 -> 1(valid)0110101(53)
    따라서 찾는 물리주소는 PFN + offset = 0110101(53)11100(28)
    PFN: 0xb5(53) 이므로 page 53의 28 인덱스 바이트를 접근한다. (세번재 메모리 접근)
    page 53: 0f(0th) 0c 18 09 0e 12 1c 0f 08 17 13 07 1c 1e 19 1b 09 16 1b 15 0e 03 0d 12 1c 1d 0e 1a 08(28th) 18 11 00
    찾는 값은 0x08이다.

    이 변환의 과정에서 총 세번의 메모리 접근이 발생한다.

3.  캐시 메모리가 어떻게 동작하는지 이해했다고 했을 때, 캐시를 사용하면 페이지 테이블에 대한 메모리 참조는 어떻게 동작할까?
    캐시 히트가 많이 생겨날까(그래서 빠르게 접근될 것인가)? 또는 많은 미스를 만들어 낼까(그러므로 느리게 접근될 것인가)?

A.  멀티 레벨 페이징에서 페이지 테이블은 free 풀에서 할당받는 메모리로 구성된다. 따라서 공간 지역성이 떨어진다. 또한 동일한 페이지에 반복적으로 접근하는
    예외적인 상황을 제외하면 시간 지역성 또한 떨어진다. 따라서 페이지 테이블에 대한 메모리 참조는 캐시 미스를 만들어낼 가능성이 높다.