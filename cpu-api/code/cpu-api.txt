1.  fork()를 호출하는 프로그램을 작성하라. 
    fork()를 호출하기 전에 메인 프로세스는 변수에 접근하고 (예, x) 변수에 값을 지정하라 (예, 100).
    자식 프로세스에서 그 변수의 값은 무엇인가? 부모와 자식이 변수 x를 변경한 후에 변수는 어떻게 변했는가?

A.  변수의 값을 변경하지 않으면 자식 프로세스에서의 값은 그대로이다.
    부모와 자식이 변수 x의 값을 변경하면 각자 변경한 값으로 변한다.
    이는 프로세스는 자신만의 독립된 메모리(주소공간)를 할당받기 때문에 별도의 지역변수(스택)를 갖게되는 것이다.

2.  open() 시스템 콜을 사용하여 파일을 여는 프로그램을 작성하고 새 프로세스를 생성하기 위하여 fork()를 호출하라.
    자식과 부모가 open()에 의해 반환된 파일 디스크립터에 접근할 수 있는가?
    부모와 자식 프로세스가 동시에 파일에 쓰기 작업을 할 수 있는가?

A.  자식과 부모 모두 open()에 의해 반환된 파일 디스크립터에 접근 가능하다.
    부모와 자식 프로세스가 동시에 파일 쓰기 작업도 가능하다.
    다만 쓰기 작업의 순서는 보장되지 않는다.

3.  fork()를 사용하는 다른 프로그램을 작성하라. 
    자식 프로세스는 “hello”를 출력하고 부모 프로세스는 “goodbye”를 출력해야 한다. 
    항상 자식 프로세스가 먼저 출력하게 하라. 부모가 wait()를 호출하지 않고 할 수 있는가?

A.  시그널을 이용하거나 파이프를 이용한다.

4.  fork()를 호출하고 /bin/ls를 실행하기 위하여 exec() 계열의 함수를 호출 하는 프로그램을 작성하라.
    exec()의 변형 execl(), execle(), execlp(), execv(), execvp(), execve() 모두를 사용할 수 있는지 시도해 보라.
    기본적으 로는 동일한 기능을 수행하는 시스템 콜에 여러 변형이 있는 이유를 생각해 보라.

A.  모두 사용 가능하다. 다양한 변형이 있는 이유는 편의성과 유연성을 위해서다.

5.  wait()를 사용하여 자식 프로세스가 종료되기를 기다리는 프로그램을 작성하라. 
    wait()가 반환하는 것은 무엇인가? 자식 프로세스가 wait()를 호출하면 어떤 결과가 발생하는가?

A.  wait()가 반환하는 것은 성공 시 종료된 자식 프로세스의 PID이고, 실패 시 -1 이다.
    자식 프로세스가 wait()를 호출하면 자식 프로세스의 자식 프로세스가 존재하지 않으므로 -1을 return한다.

6.  위 문제에서 작성한 프로그램을 수정하여 wait() 대신에 waitpid()를 사용하라.
    어떤 경우에 waitpid()를 사용하는 것이 좋은가?

A.  특정 자식 프로세스가 종료되길 기다릴 때 사용하기에 유용하다. 

7.  자식 프로세스를 생성하고 자식 프로세스가 표준 출력(STDOUT_FILENO)을 닫는 프로그램을 작성하라. 
    자식이 설명자를 닫은 후에 아무거나 출력하기 위하여 printf() 를 호출하면 무슨 일이 생기는가?

A.  표준 출력이 닫아졌기 때문에 콘솔 화면에 아무 것도 출력되지 않는다.

8.  두 개의 자식 프로세스를 생성하고 pipe() 시스템 콜을 사용하여 한 자식의 표준 출력을 다른 자식의 입력으로 연결하는 프로그램을 작성하라.

A.  